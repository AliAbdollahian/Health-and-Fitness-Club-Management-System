Index: src/test/java/JdbcDatabaseOperations.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.math.BigDecimal;\nimport java.sql.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class JdbcDatabaseOperations implements DatabaseOperations {\n    private static final String URL = \"jdbc:postgresql://localhost:5432/Health-and-Fitness-Club-Management-System\";\n    private static final String USER = \"postgres\";\n    private static final String PASSWORD = \"postgres\";\n    private Connection connection;\n\n    public JdbcDatabaseOperations() {\n        try {\n            // Load the PostgreSQL JDBC driver\n            Class.forName(\"org.postgresql.Driver\");\n            // Establish connection\n            connection = DriverManager.getConnection(URL, USER, PASSWORD);\n        } catch (ClassNotFoundException | SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public Member getMemberById(int memberId) {\n        Member member = null;\n        String query = \"SELECT * FROM Member WHERE memberId = ?\";\n        try (Connection connection = DriverManager.getConnection(URL, USER, PASSWORD);\n             PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setInt(1, memberId);\n            ResultSet resultSet = preparedStatement.executeQuery();\n            if (resultSet.next()) {\n                member = new Member(\n                        resultSet.getInt(\"memberId\"),\n                        resultSet.getString(\"fullName\"),\n                        resultSet.getDate(\"dateOfBirth\"),\n                        resultSet.getString(\"fitnessGoal\"),\n                        resultSet.getDouble(\"weightGoal\"),\n                        resultSet.getInt(\"timeGoal\")\n                );\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return member;\n    }\n\n    @Override\n    public Member getMemberByName(String fullName) {\n        Member member = null;\n        String query = \"SELECT * FROM Member WHERE fullName = ?\";\n        try (Connection connection = DriverManager.getConnection(URL, USER, PASSWORD);\n             PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setString(1, fullName);\n            ResultSet resultSet = preparedStatement.executeQuery();\n            if (resultSet.next()) {\n                member = new Member(\n                        resultSet.getInt(\"memberId\"),\n                        resultSet.getString(\"fullName\"),\n                        resultSet.getDate(\"dateOfBirth\"),\n                        resultSet.getString(\"fitnessGoal\"),\n                        resultSet.getDouble(\"weightGoal\"),\n                        resultSet.getInt(\"timeGoal\")\n                );\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return member;\n    }\n\n    @Override\n    public List<Member> getAllMembers() {\n        List<Member> members = new ArrayList<>();\n        String query = \"SELECT * FROM Member\";\n        try (Connection connection = DriverManager.getConnection(URL, USER, PASSWORD);\n             Statement statement = connection.createStatement();\n             ResultSet resultSet = statement.executeQuery(query)) {\n            while (resultSet.next()) {\n                Member member = new Member(\n                        resultSet.getInt(\"memberId\"),\n                        resultSet.getString(\"fullName\"),\n                        resultSet.getDate(\"dateOfBirth\"),\n                        resultSet.getString(\"fitnessGoal\"),\n                        resultSet.getDouble(\"weightGoal\"),\n                        resultSet.getInt(\"timeGoal\")\n                );\n                members.add(member);\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return members;\n    }\n\n    @Override\n    public void addMember(Member member) {\n        String query = \"INSERT INTO Member (fullName, dateOfBirth, fitnessGoal, weightGoal, timeGoal) \" +\n                \"VALUES (?, ?, ?, ?, ?)\";\n        try (Connection connection = DriverManager.getConnection(URL, USER, PASSWORD);\n             PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setString(1, member.getFullName());\n            preparedStatement.setDate(2, new java.sql.Date(member.getDateOfBirth().getTime()));\n            preparedStatement.setString(3, member.getFitnessGoal());\n            preparedStatement.setDouble(4, member.getWeightGoal());\n            preparedStatement.setInt(5, member.getTimeGoal());\n            preparedStatement.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void updateMember(Member member) {\n        String query = \"UPDATE Member SET fullName = ?, dateOfBirth = ?, fitnessGoal = ?, weightGoal = ?, timeGoal = ? \" +\n                \"WHERE memberId = ?\";\n        try (Connection connection = DriverManager.getConnection(URL, USER, PASSWORD);\n             PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setString(1, member.getFullName());\n            preparedStatement.setDate(2, new java.sql.Date(member.getDateOfBirth().getTime()));\n            preparedStatement.setString(3, member.getFitnessGoal());\n            preparedStatement.setDouble(4, member.getWeightGoal());\n            preparedStatement.setInt(5, member.getTimeGoal());\n            preparedStatement.setInt(6, member.getMemberId());\n            preparedStatement.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void deleteMember(int memberId) {\n        String query = \"DELETE FROM Member WHERE memberId = ?\";\n        try (Connection connection = DriverManager.getConnection(URL, USER, PASSWORD);\n             PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setInt(1, memberId);\n            preparedStatement.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public Trainer getTrainerById(int trainerId) {\n        Trainer trainer = null;\n        String query = \"SELECT * FROM trainer WHERE trainerId = ?\";\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setInt(1, trainerId);\n            ResultSet resultSet = preparedStatement.executeQuery();\n            if (resultSet.next()) {\n                trainer = new Trainer(\n                        resultSet.getInt(\"trainerId\"),\n                        resultSet.getString(\"fullName\"),\n                        resultSet.getDate(\"availability\")\n                );\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return trainer;\n    }\n\n    @Override\n    public List<Trainer> getAllTrainers() {\n        List<Trainer> trainers = new ArrayList<>();\n        String query = \"SELECT * FROM trainer\";\n        try (Statement statement = connection.createStatement();\n             ResultSet resultSet = statement.executeQuery(query)) {\n            while (resultSet.next()) {\n                Trainer trainer = new Trainer(\n                        resultSet.getInt(\"trainerId\"),\n                        resultSet.getString(\"fullName\"),\n                        resultSet.getDate(\"availability\")\n                );\n                trainers.add(trainer);\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return trainers;\n    }\n\n    @Override\n    public void addTrainer(Trainer trainer) {\n        String query = \"INSERT INTO trainer (trainerId, fullName, availability) VALUES (?, ?, ?)\";\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setInt(1, trainer.getTrainerId());\n            preparedStatement.setString(2, trainer.getFullName());\n            preparedStatement.setDate(3, new java.sql.Date(trainer.getAvailability().getTime()));\n            preparedStatement.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void updateTrainer(Trainer trainer) {\n        String query = \"UPDATE trainer SET fullName = ?, availability = ? WHERE trainerId = ?\";\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setString(1, trainer.getFullName());\n            preparedStatement.setDate(2, new java.sql.Date(trainer.getAvailability().getTime()));\n            preparedStatement.setInt(3, trainer.getTrainerId());\n            preparedStatement.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void deleteTrainer(int trainerId) {\n        String query = \"DELETE FROM trainer WHERE trainerId = ?\";\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setInt(1, trainerId);\n            preparedStatement.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    // Inside JdbcDatabaseOperations class\n\n    public void addTrainerAvailabilityDate(int trainerId, Date availabilityDate) {\n        String query = \"UPDATE trainer SET availability = ? WHERE trainerId = ?\";\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setDate(1, new java.sql.Date(availabilityDate.getTime()));\n            preparedStatement.setInt(2, trainerId);\n            preparedStatement.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Date getTrainerAvailabilityDate(int trainerId) {\n        Date availabilityDate = null;\n        String query = \"SELECT availability FROM trainer WHERE trainerId = ?\";\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setInt(1, trainerId);\n            ResultSet resultSet = preparedStatement.executeQuery();\n            if (resultSet.next()) {\n                availabilityDate = resultSet.getDate(\"availability\");\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return availabilityDate;\n    }\n\n    @Override\n    public AdministrativeStaff getAdministrativeStaffById(int administrativeId) {\n        AdministrativeStaff staff = null;\n        String query = \"SELECT * FROM administrativeProfiles WHERE administrativeId = ?\";\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setInt(1, administrativeId);\n            ResultSet resultSet = preparedStatement.executeQuery();\n            if (resultSet.next()) {\n                staff = new AdministrativeStaff(\n                        resultSet.getInt(\"administrativeId\"),\n                        resultSet.getString(\"fullName\"),\n                        resultSet.getString(\"email\")\n                );\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return staff;\n    }\n\n    @Override\n    public List<AdministrativeStaff> getAllAdministrativeStaff() {\n        List<AdministrativeStaff> staffMembers = new ArrayList<>();\n        String query = \"SELECT * FROM administrativeProfiles\";\n        try (Statement statement = connection.createStatement();\n             ResultSet resultSet = statement.executeQuery(query)) {\n            while (resultSet.next()) {\n                AdministrativeStaff staff = new AdministrativeStaff(\n                        resultSet.getInt(\"administrativeId\"),\n                        resultSet.getString(\"fullName\"),\n                        resultSet.getString(\"email\")\n                );\n                staffMembers.add(staff);\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return staffMembers;\n    }\n\n    @Override\n    public void addAdministrativeStaff(AdministrativeStaff administrativeStaff) {\n        String query = \"INSERT INTO administrativeProfiles (administrativeId, fullName, email) VALUES (?, ?, ?)\";\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setInt(1, administrativeStaff.getAdministrativeId());\n            preparedStatement.setString(2, administrativeStaff.getFullName());\n            preparedStatement.setString(3, administrativeStaff.getEmail());\n            preparedStatement.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void updateAdministrativeStaff(AdministrativeStaff administrativeStaff) {\n        String query = \"UPDATE administrativeProfiles SET fullName = ?, email = ? WHERE administrativeId = ?\";\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setString(1, administrativeStaff.getFullName());\n            preparedStatement.setString(2, administrativeStaff.getEmail());\n            preparedStatement.setInt(3, administrativeStaff.getAdministrativeId());\n            preparedStatement.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void deleteAdministrativeStaff(int administrativeId) {\n        String query = \"DELETE FROM administrativeProfiles WHERE administrativeId = ?\";\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setInt(1, administrativeId);\n            preparedStatement.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n\n    //Health Metrics Operations\n    // Add a new health metric record\n    @Override\n    public void addHealthMetric(HealthMetrics healthMetric) {\n        String query = \"INSERT INTO healthMetrics (memberId, weight, height) VALUES (?, ?, ?)\";\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setInt(1, healthMetric.getMemberId());\n            preparedStatement.setBigDecimal(2, BigDecimal.valueOf(healthMetric.getWeight()));\n            preparedStatement.setBigDecimal(3, BigDecimal.valueOf(healthMetric.getHeight()));\n            preparedStatement.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    // Get health metrics by memberId\n    @Override\n    public List<HealthMetrics> getHealthMetricsByMemberId(int memberId) {\n        List<HealthMetrics> metrics = new ArrayList<>();\n        String query = \"SELECT * FROM healthMetrics WHERE memberId = ?\";\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setInt(1, memberId);\n            ResultSet resultSet = preparedStatement.executeQuery();\n            while (resultSet.next()) {\n                HealthMetrics metric = new HealthMetrics(\n                        resultSet.getInt(\"metricId\"),\n                        resultSet.getInt(\"memberId\"),\n                        resultSet.getBigDecimal(\"weight\").doubleValue(),\n                        resultSet.getBigDecimal(\"height\").doubleValue()\n                );\n                metrics.add(metric);\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return metrics;\n    }\n\n    // Update a health metric\n    @Override\n    public void updateHealthMetric(HealthMetrics healthMetric) {\n        String query = \"UPDATE healthMetrics SET weight = ?, height = ? WHERE metricId = ?\";\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setBigDecimal(1, BigDecimal.valueOf(healthMetric.getWeight()));\n            preparedStatement.setBigDecimal(2, BigDecimal.valueOf(healthMetric.getHeight()));\n            preparedStatement.setInt(3, healthMetric.getMetricId());\n            preparedStatement.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    // Delete a health metric\n    @Override\n    public void deleteHealthMetric(int metricId) {\n        String query = \"DELETE FROM healthMetrics WHERE metricId = ?\";\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setInt(1, metricId);\n            preparedStatement.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n\n    // ClassSchedule Operations\n    @Override\n    public void addClassSchedule(ClassSchedule schedule) throws SQLException {\n        String query = \"INSERT INTO classSchedules (className, classDate, startTime, endTime, trainerId) VALUES (?, ?, ?, ?, ?)\";\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setString(1, schedule.getClassName());\n            preparedStatement.setDate(2, Date.valueOf(schedule.getClassDate()));\n            preparedStatement.setTime(3, Time.valueOf(schedule.getStartTime()));\n            preparedStatement.setTime(4, Time.valueOf(schedule.getEndTime()));\n            preparedStatement.setInt(5, schedule.getTrainerId());\n            preparedStatement.executeUpdate();\n        }\n    }\n\n    @Override\n    public List<ClassSchedule> getAllClassSchedules() throws SQLException {\n        List<ClassSchedule> schedules = new ArrayList<>();\n        String query = \"SELECT * FROM classSchedules\";\n        try (Statement statement = connection.createStatement();\n             ResultSet resultSet = statement.executeQuery(query)) {\n            while (resultSet.next()) {\n                schedules.add(new ClassSchedule(\n                        resultSet.getInt(\"classId\"),\n                        resultSet.getString(\"className\"),\n                        resultSet.getDate(\"classDate\").toLocalDate(),\n                        resultSet.getTime(\"startTime\").toLocalTime(),\n                        resultSet.getTime(\"endTime\").toLocalTime(),\n                        resultSet.getInt(\"trainerId\")));\n            }\n        }\n        return schedules;\n    }\n\n    @Override\n    public void updateClassSchedule(ClassSchedule schedule) throws SQLException {\n        String query = \"UPDATE classSchedules SET className = ?, classDate = ?, startTime = ?, endTime = ?, trainerId = ? WHERE classId = ?\";\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setString(1, schedule.getClassName());\n            preparedStatement.setDate(2, Date.valueOf(schedule.getClassDate()));\n            preparedStatement.setTime(3, Time.valueOf(schedule.getStartTime()));\n            preparedStatement.setTime(4, Time.valueOf(schedule.getEndTime()));\n            preparedStatement.setInt(5, schedule.getTrainerId());\n            preparedStatement.setInt(6, schedule.getClassId());\n            preparedStatement.executeUpdate();\n        }\n    }\n    @Override\n    public void deleteClassSchedule(int classId) throws SQLException {\n        String query = \"DELETE FROM classSchedules WHERE classId = ?\";\n        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {\n            preparedStatement.setInt(1, classId);\n            preparedStatement.executeUpdate();\n        }\n    }\n\n}\n
===================================================================
diff --git a/src/test/java/JdbcDatabaseOperations.java b/src/test/java/JdbcDatabaseOperations.java
--- a/src/test/java/JdbcDatabaseOperations.java	
+++ b/src/test/java/JdbcDatabaseOperations.java	
@@ -4,9 +4,9 @@
 import java.util.List;
 
 public class JdbcDatabaseOperations implements DatabaseOperations {
-    private static final String URL = "jdbc:postgresql://localhost:5432/Health-and-Fitness-Club-Management-System";
+    private static final String URL = "jdbc:postgresql://localhost:5432/Health and Fitness Club Management System";
     private static final String USER = "postgres";
-    private static final String PASSWORD = "postgres";
+    private static final String PASSWORD = "987654Aa@";
     private Connection connection;
 
     public JdbcDatabaseOperations() {
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"CompilerConfiguration\">\n    <annotationProcessing>\n      <profile name=\"Maven default annotation processors profile\" enabled=\"true\">\n        <sourceOutputDir name=\"target/generated-sources/annotations\" />\n        <sourceTestOutputDir name=\"target/generated-test-sources/test-annotations\" />\n        <outputRelativeToContentRoot value=\"true\" />\n        <module name=\"Project_v1\" />\n      </profile>\n    </annotationProcessing>\n  </component>\n</project>
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
--- a/.idea/compiler.xml	
+++ b/.idea/compiler.xml	
@@ -6,6 +6,7 @@
         <sourceOutputDir name="target/generated-sources/annotations" />
         <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
         <outputRelativeToContentRoot value="true" />
+        <module name="COMP_3005_Project" />
         <module name="Project_v1" />
       </profile>
     </annotationProcessing>
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"96d2880a-daea-44bc-bdf4-88b77071c9b1\" name=\"Changes\" comment=\"More Operations\">\n      <change afterPath=\"$PROJECT_DIR$/.idea/encodings.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/.idea/vcs.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/pom.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/compiler.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/compiler.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Project_v1.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Project_v1.iml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/test/java/DatabaseOperations.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/test/java/DatabaseOperations.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/test/java/JdbcDatabaseOperations.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/test/java/JdbcDatabaseOperations.java\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Interface\" />\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <favorite-branches>\n      <branch-storage>\n        <map>\n          <entry type=\"REMOTE\">\n            <value>\n              <list>\n                <branch-info repo=\"$PROJECT_DIR$\" source=\"origin/InitialStructure\" />\n              </list>\n            </value>\n          </entry>\n        </map>\n      </branch-storage>\n    </favorite-branches>\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;harishan-a&quot;\n  }\n}</component>\n  <component name=\"GithubPullRequestsUISettings\">{\n  &quot;selectedUrlAndAccountId&quot;: {\n    &quot;url&quot;: &quot;https://github.com/AliAbdollahian/Health-and-Fitness-Club-Management-System.git&quot;,\n    &quot;accountId&quot;: &quot;d3f65fe7-8a6e-4e82-9ac4-170df14dfca6&quot;\n  }\n}</component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 8\n}</component>\n  <component name=\"ProjectId\" id=\"2eYGeqiov3H781ekelzynZGtuSS\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;ASKED_SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\n    &quot;Application.GUI.executor&quot;: &quot;Run&quot;,\n    &quot;Application.Main.executor&quot;: &quot;Run&quot;,\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;InitialStructure&quot;,\n    &quot;jdk.selected.JAVA_MODULE&quot;: &quot;openjdk-20&quot;,\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\n    &quot;last_opened_file_path&quot;: &quot;/Users/harishanamutheesan/Developer/School/COMP 3005/Health-and-Fitness-Club-Management-System&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;onboarding.tips.debug.path&quot;: &quot;/Users/ali/Documents/COMP3005/Project_v1/src/main/java/org/example/Main.java&quot;,\n    &quot;project.structure.last.edited&quot;: &quot;Project&quot;,\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\n    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.lookFeel&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$\" />\n    </key>\n  </component>\n  <component name=\"RunManager\">\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\n      <module name=\"Project_v1\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.Main\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-jdk-9f38398b9061-18abd8497189-intellij.indexing.shared.core-IU-241.14494.240\" />\n        <option value=\"bundled-js-predefined-1d06a55b98c1-74d2a5396914-JavaScript-IU-241.14494.240\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"96d2880a-daea-44bc-bdf4-88b77071c9b1\" name=\"Changes\" comment=\"\" />\n      <created>1712074197282</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1712074197282</updated>\n      <workItem from=\"1712074199332\" duration=\"6163000\" />\n      <workItem from=\"1712278365194\" duration=\"2035000\" />\n      <workItem from=\"1712282268848\" duration=\"1132000\" />\n      <workItem from=\"1712684360965\" duration=\"4415000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Initial structure, provided classes and methods to be implemented\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1712101797830</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1712101797830</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Update\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1712278519119</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1712278519119</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"More Operations\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1712691688136</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1712691688136</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"4\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Initial structure, provided classes and methods to be implemented\" />\n    <MESSAGE value=\"Update\" />\n    <MESSAGE value=\"More Operations\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"More Operations\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/src/main/java/org/example/Main.java</url>\n          <line>13</line>\n          <option name=\"timeStamp\" value=\"1\" />\n        </line-breakpoint>\n      </breakpoints>\n    </breakpoint-manager>\n  </component>\n</project>
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -5,15 +5,10 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="96d2880a-daea-44bc-bdf4-88b77071c9b1" name="Changes" comment="More Operations">
-      <change afterPath="$PROJECT_DIR$/.idea/encodings.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/pom.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/compiler.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/compiler.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/modules.xml" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Project_v1.iml" beforeDir="false" afterPath="$PROJECT_DIR$/Project_v1.iml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/test/java/DatabaseOperations.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/DatabaseOperations.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/test/java/JdbcDatabaseOperations.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/JdbcDatabaseOperations.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -44,7 +39,7 @@
     </favorite-branches>
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-        <entry key="$PROJECT_DIR$" value="main" />
+        <entry key="$PROJECT_DIR$" value="InitialStructure" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
@@ -93,7 +88,7 @@
     &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
     &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
     &quot;onboarding.tips.debug.path&quot;: &quot;/Users/ali/Documents/COMP3005/Project_v1/src/main/java/org/example/Main.java&quot;,
-    &quot;project.structure.last.edited&quot;: &quot;Project&quot;,
+    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
     &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
     &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,
     &quot;settings.editor.selected.configurable&quot;: &quot;preferences.lookFeel&quot;,
@@ -105,7 +100,14 @@
       <recent name="$PROJECT_DIR$" />
     </key>
   </component>
-  <component name="RunManager">
+  <component name="RunManager" selected="Application.GUI">
+    <configuration name="GUI" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="GUI" />
+      <module name="COMP_3005_Project" />
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
     <configuration name="Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
       <option name="MAIN_CLASS_NAME" value="Main" />
       <module name="Project_v1" />
@@ -115,6 +117,7 @@
     </configuration>
     <recent_temporary>
       <list>
+        <item itemvalue="Application.GUI" />
         <item itemvalue="Application.Main" />
       </list>
     </recent_temporary>
@@ -122,8 +125,7 @@
   <component name="SharedIndexes">
     <attachedChunks>
       <set>
-        <option value="bundled-jdk-9f38398b9061-18abd8497189-intellij.indexing.shared.core-IU-241.14494.240" />
-        <option value="bundled-js-predefined-1d06a55b98c1-74d2a5396914-JavaScript-IU-241.14494.240" />
+        <option value="jdk-20.0.2-azul-20.0.2-f644763e9732-2383794a" />
       </set>
     </attachedChunks>
   </component>
@@ -139,6 +141,9 @@
       <workItem from="1712278365194" duration="2035000" />
       <workItem from="1712282268848" duration="1132000" />
       <workItem from="1712684360965" duration="4415000" />
+      <workItem from="1712692561216" duration="382000" />
+      <workItem from="1712692955684" duration="29000" />
+      <workItem from="1712693093503" duration="538000" />
     </task>
     <task id="LOCAL-00001" summary="Initial structure, provided classes and methods to be implemented">
       <option name="closed" value="true" />
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\n  <component name=\"MavenProjectsManager\">\n    <option name=\"originalFiles\">\n      <list>\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_21\" default=\"true\" project-jdk-name=\"openjdk-21\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/out\" />\n  </component>\n</project>
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	
+++ b/.idea/misc.xml	
@@ -8,7 +8,7 @@
       </list>
     </option>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="openjdk-21" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_20" default="true" project-jdk-name="openjdk-21" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
